import os

import telebot
import re
import logging

from telebot.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

from message_processor import get_unified_user_message, get_chat_id_to_reply, unify_message, is_user_try_answer
from question import CompositeQuestionStorage, AkentevQuestionStorage, InMemoryQuestionStorage, DEFAULT_QUESTIONS
from user_data import InMemoryUserDataStorage, RedisDataStorage, InMemoryWithFileSavingDataStorage

token = '1621053959:AAH0OF1Yh6mLDNZW1DahCbTl1KYN77DP9Iw'
bot = telebot.TeleBot(token)

telebot.logger.setLevel(logging.DEBUG)

# —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
complexity_reg_exp = r'^—Å–ª–æ–∂–Ω–æ—Å—Ç—å ([123])$'

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≤–æ–¥–∏—Ç –±–æ—Ç, –µ—Å–ª–∏ –µ–≥–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –æ—Ç –Ω–µ–≥–æ —Ö–æ—Ç—è—Ç
start_message = '–≠—Ç–æ –±–æ—Ç-–∏–≥—Ä–∞ –≤ "–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º". –°–∫–∞–∂–∏ –º–Ω–µ "–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å", —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å, ' \
                '–∏–ª–∏ "–ü–æ–∫–∞–∂–∏ —Å—á—ë—Ç", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ —Ç–≤–æ–∏—Ö –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π. ' \
                '–ú–µ–Ω—è–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã, —Å–∫–∞–∑–∞–≤ "–°–ª–æ–∂–Ω–æ—Å—Ç—å 1", "–°–ª–æ–∂–Ω–æ—Å—Ç—å 2" –∏–ª–∏ "–°–ª–æ–∂–Ω–æ—Å—Ç—å 3"!'

# —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ –±–æ—Ç–∞
internal_error_message = '–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ'

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à –±–æ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API,
# –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç 200), —Ç–æ –±–µ—Ä—ë–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
question_storage = CompositeQuestionStorage(
    [
        AkentevQuestionStorage(),
        InMemoryQuestionStorage(DEFAULT_QUESTIONS)
    ]
)

# —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_storage = InMemoryWithFileSavingDataStorage('storage.json')
redis_url = os.environ.get('REDIS_URL')
if redis_url is not None:
    user_data_storage = RedisDataStorage(redis_url)


def send_message_about_internal_exception(bot, user_id, e):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ª—É—á–∏–ª–∞—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ (TeleBot)
    :param user_id: telegramID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (int)
    :param e: –æ–±—ä–µ–∫—Ç —Å–ª—É—á–∏–≤—à–µ–π—Å—è –æ—à–∏–±–∫–∏ (Exception)
    """
    telebot.logger.error(e)
    bot.send_message(user_id, internal_error_message)


def send_start_message(bot, user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ (TeleBot)
    :param user_id: telegramID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (int)
    """
    markup = ReplyKeyboardMarkup()

    markup.row(KeyboardButton('–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å'), KeyboardButton('–ü–æ–∫–∞–∂–∏ —Å—á—ë—Ç'))
    markup.row(KeyboardButton('–°–ª–æ–∂–Ω–æ—Å—Ç—å 1'), KeyboardButton('–°–ª–æ–∂–Ω–æ—Å—Ç—å 2'), KeyboardButton('–°–ª–æ–∂–Ω–æ—Å—Ç—å 3'))
    markup.row(KeyboardButton('–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?'))

    bot.send_message(user_id, start_message, reply_markup=markup)


def send_message_with_question(bot, user_id, question, prefix=''):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ (TeleBot)
    :param user_id: telegramID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (int)
    :param question: –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—ë—Ç—Å—è (Question)
    :param prefix: —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (str)
    """
    markup = InlineKeyboardMarkup(row_width=2)
    [val1, val2, val3, val4] = question.answers
    markup.add(InlineKeyboardButton(val1, callback_data=val1), InlineKeyboardButton(val2, callback_data=val2))
    markup.add(InlineKeyboardButton(val3, callback_data=val3), InlineKeyboardButton(val4, callback_data=val4))

    message = f'{prefix}{question.question}'
    bot.send_message(user_id, message, reply_markup=markup)


@bot.message_handler(commands=['start'])
@bot.message_handler(
    func=lambda message: get_unified_user_message(message) in ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', '–∫–∞–∫ –∏–≥—Ä–∞—Ç—å?'])
def start(message):
    send_start_message(bot, get_chat_id_to_reply(message))


@bot.message_handler(
    func=lambda message: get_unified_user_message(message) in ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', '–∫–∞–∫ –∏–≥—Ä–∞—Ç—å?'])
def start_handler(message):
    send_start_message(bot, get_chat_id_to_reply(message))


@bot.message_handler(
    func=lambda message: get_unified_user_message(message) in ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç!', '–ø—Ä–∏–≤–µ—Ç'])
def hello_handler(message):
    bot.send_message(get_chat_id_to_reply(message), '–ù—É –ø—Ä–∏–≤–µ—Ç!')


@bot.message_handler(
    func=lambda message: re.match(complexity_reg_exp, get_unified_user_message(message)))
def complexity_handler(message):
    user_id = get_chat_id_to_reply(message)
    try:
        m = re.match(complexity_reg_exp, get_unified_user_message(message))
        if m:
            complexity = m.group(1)
            user_data_storage.set_user_complexity(user_id, complexity)

            bot.send_message(user_id, f'–ò–∑–º–µ–Ω–∏–ª —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –Ω–∞ {complexity} –∏–∑ 3!')
    except Exception as e:
        send_message_about_internal_exception(bot, user_id, e)


@bot.message_handler(
    func=lambda message: get_unified_user_message(message) == '—Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å')
def ask_question_handler(message):
    user_id = get_chat_id_to_reply(message)
    try:
        question = user_data_storage.get_user_current_question(user_id)
        if question is None:
            complexity = user_data_storage.get_user_complexity(user_id)
            question = question_storage.get_question(complexity)
            user_data_storage.put_user_current_question(user_id, question)
            send_message_with_question(bot, user_id, question)
        else:
            send_message_with_question(bot, user_id, question,
                                       prefix='–¢—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ–≤—Ç–æ—Ä—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è!\n\n')
    except Exception as e:
        send_message_about_internal_exception(bot, user_id, e)


@bot.message_handler(
    func=lambda message: get_unified_user_message(message) in ['–ø–æ–∫–∞–∂–∏ —Å—á—ë—Ç'])
def scores_handler(message):
    user_id = get_chat_id_to_reply(message)
    try:
        victories = user_data_storage.get_user_victories_count(user_id)
        defeats = user_data_storage.get_user_defeats_count(user_id)
        bot.send_message(user_id, f'–ü–æ–±–µ–¥: {victories}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {defeats}')
    except Exception as e:
        send_message_about_internal_exception(bot, user_id, e)


@bot.callback_query_handler(func=lambda call: True)
def answer_callback(callback):
    user_id = get_chat_id_to_reply(callback)
    try:
        user_message = unify_message(callback.data)

        question = user_data_storage.get_user_current_question(user_id)
        if question is not None:
            if is_user_try_answer(user_message, question.answers):
                if user_message == unify_message(question.correct_answer):
                    bot.send_message(user_id, 'üëç –ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
                    user_data_storage.add_user_victory(user_id)
                else:
                    bot.send_message(user_id, f'üòî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª "{question.correct_answer}"')
                    user_data_storage.add_user_defeat(user_id)

                user_data_storage.clear_user_current_question(user_id)
            else:
                send_message_with_question(bot, user_id, question,
                                           prefix='–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É –∑–∞—Å—á–∏—Ç–∞—Ç—å –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π '
                                                  '–æ—Ç–≤–µ—Ç, –Ω–æ, –º–æ–∂–µ—Ç, –≤—Å—ë –∂–µ –æ—Ç–≤–µ—Ç–∏—à—å –∫–∞–∫ –Ω—É–∂–Ω–æ?\n\n')
        else:
            bot.send_message(user_id, '–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª! –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π')
    except Exception as e:
        send_message_about_internal_exception(bot, user_id, e)


@bot.message_handler(func=lambda message: True)
def default_handler(message):
    user_id = get_chat_id_to_reply(message)
    try:
        question = user_data_storage.get_user_current_question(user_id)
        if question is not None:
            bot.send_message(user_id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—à—å –≤–µ—Ä–Ω—ã–º')
        else:
            send_start_message(bot, user_id)
    except Exception as e:
        send_message_about_internal_exception(bot, user_id, e)


bot.polling()
